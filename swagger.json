{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "ERP System API documentation",
        "description": "My User Project Application API",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "host": "localhost:3000",
    "basePath": "/",
    "tags": [
        {
            "name": "Users",
            "description": "API for users in the system"
        }
    ],
    "schemes": ["http"],
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "paths": {
        "/api/users/all": {
            "get": {
                "tags": ["Users"],
                "summary": "All Users",
                "description": "Get all users from the database",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/users/{userId}": {
            "get": {
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id associated directly with single user in the database",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "summary": "Get single user",
                "description": "Find one user in database via passing ID",
                "tags": ["Users"],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "404": {
                        "description": "User with given id does not exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "summary": "Delete single user",
                "tags": ["Users"],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id associated directly with single user in the database",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "api_key",
                        "description": "Secret api key for temporary replace JWT authorization functionality",
                        "type": "string",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User has been removed successfully"
                    },
                    "401": {
                        "description": "Invalid api key"
                    },
                    "404": {
                        "description": "User with given id has not been found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "tags": ["Users"],
                "summary": "Update current existing user",
                "operationId": "Update user",
                "parameters": [
                    {
                        "name": "api_key",
                        "description": "Secret api key for temporary replace JWT authorization functionality",
                        "type": "string",
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "userId",
                        "description": "Id associated directly with single user in the database",
                        "type": "integer",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Updated user data",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "Tadeusz"
                                },
                                "surname": {
                                    "type": "string",
                                    "example": "Soplica"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User has been updated successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Request object is invalid",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "Name length must be less than or equal 32 characters long"
                                },
                                "surname": {
                                    "type": "string",
                                    "example": "Surname length must be at least 3 characters long"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error server error"
                    }
                }
            }
        },
        "/api/users/": {
            "post": {
                "tags": ["Users"],
                "summary": "Register new user",
                "operationId": "Add user",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "New user data, you can fill the form by your own or just use this prepared one",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "Tadeusz"
                                },
                                "surname": {
                                    "type": "string",
                                    "example": "Soplica"
                                },
                                "email": {
                                    "type": "string",
                                    "example": "jakis@soplicowo.com"
                                },
                                "password": {
                                    "type": "string",
                                    "example": "qwerty123"
                                },
                                "password_repeat": {
                                    "type": "string",
                                    "example": "qwerty123"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User has been created successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Request object is invalid",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "example": "Invalid email address format"
                                },
                                "password_repeat": {
                                    "type": "string",
                                    "example": "Passwords are not equal"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "uniqueItems": true,
                    "example": "1"
                },
                "name": {
                    "type": "string",
                    "example": "Kacper"
                },
                "surname": {
                    "type": "string",
                    "example": "Ksiazek"
                },
                "email": {
                    "type": "string",
                    "example": "Kacper@gmail.com"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2020-12-13T23:49:18.877Z"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2020-12-13T23:49:18.877Z"
                }
            }
        }
    }
}
